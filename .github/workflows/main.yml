name: Frontend Next.js Blue-Green Deploy

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: igo-frontend
      CONTAINER_BLUE: frontend-blue
      CONTAINER_GREEN: frontend-green
      NGINX_TARGET_FILE: /etc/nginx/conf.d/frontend.target

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Generate environment files from secrets
        run: |
          # .env.local 생성
          cat <<EOF > .env.local
          ${{ secrets.FRONTEND_ENV_LOCAL }}
          EOF
          
          # process.env 생성 (필요한 경우)
          cat <<EOF > process.env
          ${{ secrets.FRONTEND_PROCESS_ENV }}
          EOF
          
          # Firebase 설정 파일 생성
          mkdir -p src/utils
          cat <<EOF > src/utils/firebase.js
          ${{ secrets.FRONTEND_FIREBASE_JS }}
          EOF

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker save ${{ env.IMAGE_NAME }}:${{ github.sha }} -o frontend-image.tar

      - name: Copy Docker Image to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "frontend-image.tar"
          target: "/home/ubuntu/igo"

      - name: Blue-Green Deploy Frontend on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/igo
            docker load -i frontend-image.tar
            
            # 현재 활성화된 포트 확인
            if ! grep -q "3001" ${{ env.NGINX_TARGET_FILE }}; then
              ACTIVE_CONTAINER=${{ env.CONTAINER_BLUE }}
              NEW_CONTAINER=${{ env.CONTAINER_GREEN }}
              NEW_PORT=3001
            else
              ACTIVE_CONTAINER=${{ env.CONTAINER_GREEN }}
              NEW_CONTAINER=${{ env.CONTAINER_BLUE }}
              NEW_PORT=3000
            fi

            echo "Frontend - Active: $ACTIVE_CONTAINER, Deploying: $NEW_CONTAINER to port $NEW_PORT"
            
            # 새 컨테이너 시작
            docker run -d \
              --name $NEW_CONTAINER \
              -p $NEW_PORT:3000 \
              --restart unless-stopped \
              ${{ env.IMAGE_NAME }}:${{ github.sha }}
            
            echo "Waiting for frontend health check..."
            sleep 20
            
            # 헬스체크 (Next.js 루트 페이지 확인)
            if curl -f http://localhost:$NEW_PORT; then
              echo "Frontend health check passed. Switching traffic..."
              
              # Nginx 타겟 파일 업데이트
              echo "server 127.0.0.1:$NEW_PORT;" | sudo tee ${{ env.NGINX_TARGET_FILE }}
              
              # Nginx 설정 리로드
              sudo nginx -t && sudo systemctl reload nginx
              
              # 기존 컨테이너 정리
              sleep 5
              if docker ps | grep -q $ACTIVE_CONTAINER; then
                docker stop $ACTIVE_CONTAINER || true
                docker rm $ACTIVE_CONTAINER || true
              fi
              
              echo "Frontend Blue-Green deployment completed successfully!"
            else
              echo "Frontend health check failed. Rolling back..."
              docker stop $NEW_CONTAINER || true
              docker rm $NEW_CONTAINER || true
              exit 1
            fi
            
            docker image prune -f
